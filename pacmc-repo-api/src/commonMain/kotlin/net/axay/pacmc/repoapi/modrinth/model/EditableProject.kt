/**
 * Labrinth
 *
 * This API is documented in the **OpenAPI format** and is available for download [here](/openapi.yaml).  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows for cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  # Authentication This API uses GitHub tokens for authentication. The token is in the `Authorization` header of the request. You can get a token [here](#operation/initAuth).    Example:  ```  Authorization: gho_pJ9dGXVKpfzZp4PUHSxYEq9hjk0h288Gwj4S  ``` 
 *
 * The version of the OpenAPI document: 13187de (v2)
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.axay.pacmc.repoapi.modrinth.model

import net.axay.pacmc.repoapi.modrinth.model.BaseProject
import net.axay.pacmc.repoapi.modrinth.model.EditableProjectAllOf
import net.axay.pacmc.repoapi.modrinth.model.EditableProjectAllOfDonationUrls
import net.axay.pacmc.repoapi.modrinth.model.EditableProjectAllOfLicense

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param slug The slug of a project, used for vanity URLs
 * @param title The title or name of the project
 * @param description A short description of the project
 * @param categories A list of the categories that the project is in
 * @param clientSide The client side support of the project
 * @param serverSide The server side support of the project
 * @param body A long form description of the mod
 * @param bodyUrl The link to the long description of the project
 * @param status The status of the project
 * @param license 
 * @param issuesUrl An optional link to where to submit bugs or issues with the project
 * @param sourceUrl An optional link to the source code of the project
 * @param wikiUrl An optional link to the project's wiki page or other relevant information
 * @param discordUrl An optional invite link to the project's discord
 * @param donationUrls A list of donation links for the project
 */
@Serializable
data class EditableProject (

    /* The slug of a project, used for vanity URLs */
    @SerialName(value = "slug") val slug: kotlin.String? = null,

    /* The title or name of the project */
    @SerialName(value = "title") val title: kotlin.String? = null,

    /* A short description of the project */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* A list of the categories that the project is in */
    @SerialName(value = "categories") val categories: kotlin.collections.List<kotlin.String>? = null,

    /* The client side support of the project */
    @SerialName(value = "client_side") val clientSide: EditableProject.ClientSide? = null,

    /* The server side support of the project */
    @SerialName(value = "server_side") val serverSide: EditableProject.ServerSide? = null,

    /* A long form description of the mod */
    @SerialName(value = "body") val body: kotlin.String? = null,

    /* The link to the long description of the project */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "body_url") val bodyUrl: kotlin.String? = "null",

    /* The status of the project */
    @SerialName(value = "status") val status: EditableProject.Status? = null,

    @SerialName(value = "license") val license: EditableProjectAllOfLicense? = null,

    /* An optional link to where to submit bugs or issues with the project */
    @SerialName(value = "issues_url") val issuesUrl: kotlin.String? = null,

    /* An optional link to the source code of the project */
    @SerialName(value = "source_url") val sourceUrl: kotlin.String? = null,

    /* An optional link to the project's wiki page or other relevant information */
    @SerialName(value = "wiki_url") val wikiUrl: kotlin.String? = null,

    /* An optional invite link to the project's discord */
    @SerialName(value = "discord_url") val discordUrl: kotlin.String? = null,

    /* A list of donation links for the project */
    @SerialName(value = "donation_urls") val donationUrls: kotlin.collections.List<EditableProjectAllOfDonationUrls>? = null

) {

    /**
     * The client side support of the project
     *
     * Values: required,optional,unsupported
     */
    @Serializable
    enum class ClientSide(val value: kotlin.String) {
        @SerialName(value = "required") required("required"),
        @SerialName(value = "optional") optional("optional"),
        @SerialName(value = "unsupported") unsupported("unsupported");
    }
    /**
     * The server side support of the project
     *
     * Values: required,optional,unsupported
     */
    @Serializable
    enum class ServerSide(val value: kotlin.String) {
        @SerialName(value = "required") required("required"),
        @SerialName(value = "optional") optional("optional"),
        @SerialName(value = "unsupported") unsupported("unsupported");
    }
    /**
     * The status of the project
     *
     * Values: approved,rejected,draft,unlisted,processing,unknown
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "approved") approved("approved"),
        @SerialName(value = "rejected") rejected("rejected"),
        @SerialName(value = "draft") draft("draft"),
        @SerialName(value = "unlisted") unlisted("unlisted"),
        @SerialName(value = "processing") processing("processing"),
        @SerialName(value = "unknown") unknown("unknown");
    }
}

